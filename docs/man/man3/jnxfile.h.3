.TH "jnxfile.h" 3 "Sun Feb 1 2015" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxfile.h \- File manipulation, read/write, kvp plucking and recursive deletion\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include 'jnxtypes\&.h'\fP
.br
\fC#include 'jnxhash\&.h'\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBjnx_file_kvp_node\fP"
.br
.RI "\fIAn jnx_int32ernal representation of the kvp node populated when used in key value pair retrieval from a file\&. \fP"
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBJNX_OPEN\fP   open"
.br
.ti -1c
.RI "#define \fBJNX_READ\fP   read"
.br
.ti -1c
.RI "#define \fBJNX_CLOSE\fP   close"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBjnx_file_kvp_node\fP \fBjnx_file_kvp_node\fP"
.br
.RI "\fIAn jnx_int32ernal representation of the kvp node populated when used in key value pair retrieval from a file\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_file_read\fP (\fBjnx_char\fP *path, \fBjnx_char\fP **buffer, \fBjnx_char\fP *flags)"
.br
.RI "\fIFunction to read the contents of a text file jnx_int32o the buffer\&. \fP"
.ti -1c
.RI "\fBjnx_hashmap\fP * \fBjnx_file_read_kvp\fP (\fBjnx_char\fP *path, \fBjnx_size\fP max_buffer, \fBjnx_char\fP *delimiter)"
.br
.RI "\fIFunction to read a file that contains key-value pairs jnx_int32o a linked list\&. \fP"
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_file_write\fP (\fBjnx_char\fP *path, \fBjnx_char\fP *data, \fBjnx_size\fP data_size, \fBjnx_char\fP *flags)"
.br
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_file_recursive_delete\fP (\fBjnx_char\fP *path, int32_t depth)"
.br
.RI "\fIFunction to recursively delete a directory pojnx_int32ed to by path\&. \fP"
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_file_mktempdir\fP (\fBjnx_char\fP *dirtemplate, \fBjnx_char\fP **path)"
.br
.RI "\fIFunction to create a temporary directory on the given path\&. \fP"
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_file_exists\fP (\fBjnx_char\fP *file)"
.br
.RI "\fIchecks if a file exists \fP"
.in -1c
.SH "Detailed Description"
.PP 
File manipulation, read/write, kvp plucking and recursive deletion\&. 

#include <jnxc_headers/jnxfile\&.h> 
.SH "Macro Definition Documentation"
.PP 
.SS "#define JNX_CLOSE   close"

.SS "#define JNX_OPEN   open"

.SS "#define JNX_READ   read"

.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBjnx_file_kvp_node\fP \fBjnx_file_kvp_node\fP"

.PP
An jnx_int32ernal representation of the kvp node populated when used in key value pair retrieval from a file\&. 
.SH "Function Documentation"
.PP 
.SS "jnx_file_exists (\fBjnx_char\fP * file)"

.PP
checks if a file exists 
.PP
\fBParameters:\fP
.RS 4
\fIfilepath\fP to check 
.RE
.PP
\fBReturns:\fP
.RS 4
1 on file existance 
.RE
.PP

.SS "jnx_file_mktempdir (\fBjnx_char\fP * template, \fBjnx_char\fP ** path)"

.PP
Function to create a temporary directory on the given path\&. 
.PP
\fBParameters:\fP
.RS 4
\fItemplate\fP is the path to create the directory on 
.br
\fIpath\fP is a pojnx_int32er to the output buffer jnx_char point32_ter 
.RE
.PP
\fBReturns:\fP
.RS 4
success on 0 
.RE
.PP

.SS "jnx_file_read (\fBjnx_char\fP * path, \fBjnx_char\fP ** buffer, \fBjnx_char\fP * flags)"

.PP
Function to read the contents of a text file jnx_int32o the buffer\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP path to the target file for reading 
.br
\fIbuffer\fP that will be filled 
.br
\fIflags\fP are the flags passed (r,rb\&.\&.\&.) 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of bytes read
.RE
.PP
\fBWarning:\fP
.RS 4
it is the users responsibility to manage the memory of the jnx_char* 
.RE
.PP

.SS "\fBjnx_hashmap\fP * jnx_file_read_kvp (\fBjnx_char\fP * path, \fBjnx_size\fP max_buffer, \fBjnx_char\fP * flags)"

.PP
Function to read a file that contains key-value pairs jnx_int32o a linked list\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP path to the target file for reading 
.br
\fIdelimiter\fP the token to break the key value pairs on e\&.g\&. '=' 
.br
\fImax_buffer\fP is maximum line size buffer 
.RE
.PP
\fBReturns:\fP
.RS 4
returns a linkedlist of jnx_file_kvp_nodes, i\&.e\&. key-value pairs\&.
.RE
.PP
\fBWarning:\fP
.RS 4
user is responsible for linked list deletion and its node/data 
.RE
.PP

.SS "jnx_file_recursive_delete (\fBjnx_char\fP * path, int32_t depth)"

.PP
Function to recursively delete a directory pojnx_int32ed to by path\&. 
.PP
\fBParameters:\fP
.RS 4
\fIpath\fP the provided path will have all its sub directories and files deleted 
.br
\fIdepth\fP defines how deep to recursively delete in a folder structure 
.RE
.PP
\fBReturns:\fP
.RS 4
success on 0
.RE
.PP
\fBWarning:\fP
.RS 4
extremely powerful and can make unrepairable changes to your file system 
.RE
.PP

.SS "\fBjnx_size\fP jnx_file_write (\fBjnx_char\fP * path, \fBjnx_char\fP * data, \fBjnx_size\fP data_size, \fBjnx_char\fP * flags)"

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
