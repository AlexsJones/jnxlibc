.\" File automatically generated by doxy2man0.1
.\" Generation date: Mon Apr 7 2014
.TH jnx_btree_remove 3 2014-04-07 "XXXpkg" "The XXX Manual"
.SH "NAME"
jnx_btree_remove \- Remove from the B-tree the record which matches the passed in key.
.SH SYNOPSIS
.nf
.B #include <jnxbtree.h>
.sp
\fBvoid jnx_btree_remove\fP(
    \fBjnx_btree  *\fP\fItree\fP,
    \fBvoid       *\fP\fIkey_in\fP,
    \fBvoid      **\fP\fIkey_out\fP,
    \fBvoid      **\fP\fIval_out\fP
);
.fi
.SH DESCRIPTION
.PP 
If the record with key is in the tree, the record is removed and the tree is rebalanced if necessary. If the record with key is not in the tree, the tree is unchanged.
.PP 
This operation will clean up the internal structures but will not attempt to free the memory for the key and value of the deleted record. It's worth bearing this in mind to avoid memory leaks. 
.SH PARAMETERS
.TP
.B tree
The B-tree from which to remove the record. 

.TP
.B key_in
The key for which to remove the record. 

.TP
.B key_out
The reference by which the pointer to the memory for key from the tree record is returned. Set this to NULL if your keys are not malloced. 

.TP
.B val_out
The reference by which the pointer to the memory for value from the tree record is returned. Set this to NULL if your values are not malloced.

.SH RETURN VALUE
.PP
Pointer to the value from the tree so that users can free potentially malloc'd values.
.SH SEE ALSO
.PP
.nh
.ad l
\fIjnxbtree.h\fP(3), \fIjnx_btree_add\fP(3), \fIjnx_btree_create\fP(3), \fIjnx_btree_destroy\fP(3), \fIjnx_btree_keys\fP(3), \fIjnx_btree_lookup\fP(3), \fIjnx_btree_remove\fP(3)
.ad
.hy
