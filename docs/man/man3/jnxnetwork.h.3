.TH "jnxnetwork.h" 3 "Mon Feb 17 2014" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxnetwork.h \- 
.PP
The API for jnxlibc networking (includes TCP, UDP )  

.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAXBUFFER\fP   4028"
.br
.RI "\fIMaximum buffer size allowed\&. \fP"
.ti -1c
.RI "#define \fBADDRESSFAMILY\fP   AF_INET"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void(* \fBjnx_network_listener_callback\fP )(char *msg, size_t bytes, char *client_ip_addr)"
.br
.RI "\fIThis is the callback for the received buffer from the network listener\&. \fP"
.ti -1c
.RI "typedef void(* \fBjnx_network_broadcast_listener_callback\fP )(char *msg)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBjnx_network_setup_listener\fP (int port, int max_connections, void(*Callback)(char *, size_t, char *))"
.br
.RI "\fIUsing port and a function pointer callback it will create a listener\&. \fP"
.ti -1c
.RI "void \fBjnx_network_cancel_listener\fP (void)"
.br
.RI "\fICancels the last set listener\&. \fP"
.ti -1c
.RI "int \fBjnx_network_send_message\fP (char *host, int port, char *msg, size_t msg_len)"
.br
.RI "\fIThis sends a message via selected port to host\&. \fP"
.ti -1c
.RI "int \fBjnx_network_send_broadcast\fP (int port, char *broadcastgroup, char *message)"
.br
.RI "\fISends a UDP datagram across the selected group range\&. \fP"
.ti -1c
.RI "void \fBjnx_network_broadcast_listener\fP (int port, char *broadcastgroup, void(*callback_function)(char *))"
.br
.RI "\fIsets up a listener for udp datagram broadcasts \fP"
.ti -1c
.RI "char * \fBjnx_network_local_ip\fP (char *interface)"
.br
.RI "\fIfinds the current machine ip address for given interface \fP"
.in -1c
.SH "Detailed Description"
.PP 
The API for jnxlibc networking (includes TCP, UDP ) 

#include <jnxc_headers/jnxnetwork\&.h> 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ADDRESSFAMILY   AF_INET"

.SS "#define MAXBUFFER   4028"

.PP
Maximum buffer size allowed\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef void(* jnx_network_broadcast_listener_callback)(char *msg)"

.SS "typedef void(* jnx_network_listener_callback)(char *msg, size_t bytes, char *client_ip_addr)"

.PP
This is the callback for the received buffer from the network listener\&. 
.PP
\fBWarning:\fP
.RS 4
User must free the msg as it has been malloced for fread purposes 
.PP
User does not need to free client_ip_addr 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "jnx_network_broadcast_listener (intport, char *broadcastgroup, void(*)(char *)callback_function)"

.PP
sets up a listener for udp datagram broadcasts 
.PP
\fBParameters:\fP
.RS 4
\fIport\fP target port to listen on 
.br
\fIbroadcastgroup\fP target group to register to 
.br
\fIcallback_function\fP pointer to the callback with received buffer 
.RE
.PP

.SS "jnx_network_cancel_listener (void)"

.PP
Cancels the last set listener\&. 
.SS "jnx_network_local_ip (char *interface)"

.PP
finds the current machine ip address for given interface 
.PP
\fBParameters:\fP
.RS 4
\fIinterface\fP the target interface e\&.g\&. 'wlan0'
.RE
.PP
\fBReturns:\fP
.RS 4
a char* of ip address or NULL if not found 
.RE
.PP

.SS "jnx_network_send_broadcast (intport, char *broadcastgroup, char *message)"

.PP
Sends a UDP datagram across the selected group range\&. 
.PP
\fBParameters:\fP
.RS 4
\fIport\fP select the port for transmission 
.br
\fIbroadcastgroup\fP this group can be set to these standards http://www.tldp.org/HOWTO/Multicast-HOWTO-2.html 
.br
\fImessage\fP the message to transmit to the broadcast group 
.RE
.PP

.SS "jnx_network_send_message (char *host, intport, char *msg, size_tmsg_len)"

.PP
This sends a message via selected port to host\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhost\fP the ip address of the host you wish to connect to 
.br
\fIport\fP port number to connect to 
.br
\fImsg\fP message to be sent 
.br
\fImsg_len\fP length of message 
.RE
.PP
\fBReturns:\fP
.RS 4
returns number of bytes sent success, -1 on failure 
.RE
.PP

.SS "jnx_network_setup_listener (intport, intmax_connections, void(*)(char *, size_t, char *)Callback)"

.PP
Using port and a function pointer callback it will create a listener\&. 
.PP
\fBParameters:\fP
.RS 4
\fIport\fP selet target listener port 
.br
\fImax_connections\fP is the size of the backlog queue 
.br
\fICallback\fP this is a function pointer to your jnx_network_listener_callback 
.RE
.PP
\fBReturns:\fP
.RS 4
status code 0 success 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
