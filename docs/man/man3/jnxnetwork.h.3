.TH "jnxnetwork.h" 3 "Sun Feb 1 2015" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxnetwork.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'jnxtypes\&.h'\fP
.br
\fC#include <ifaddrs\&.h>\fP
.br
\fC#include <inttypes\&.h>\fP
.br

.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBJNX_NETWORK_ENDIAN\fP \fBJNX_NETWORK_ENDIAN\fP"
.br
.ti -1c
.RI "typedef enum \fBJNX_HTTP_TYPE\fP \fBJNX_HTTP_TYPE\fP"
.br
.RI "\fIBasic HTTP Protocols\&. \fP"
.ti -1c
.RI "typedef enum \fBJNX_HTTP_STATE\fP \fBJNX_HTTP_STATE\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBJNX_NETWORK_ENDIAN\fP { \fBJNX_LITTLE_ENDIAN\fP, \fBJNX_BIG_ENDIAN\fP, \fBJNX_UNKNOWN_ENDIAN\fP }"
.br
.ti -1c
.RI "enum \fBJNX_HTTP_TYPE\fP { \fBJNX_HTTP_POST\fP, \fBJNX_HTTP_GET\fP }"
.br
.RI "\fIBasic HTTP Protocols\&. \fP"
.ti -1c
.RI "enum \fBJNX_HTTP_STATE\fP { \fBJNX_HTTP_STATE_OKAY\fP, \fBJNX_HTTP_STATE_FAIL\fP, \fBJNX_HTTP_STATE_UNKNOWN\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBJNX_NETWORK_ENDIAN\fP \fBjnx_network_get_endianness\fP ()"
.br
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_network_interface_to_string\fP (\fBjnx_char\fP **obuffer, \fBjnx_char\fP *interface, \fBjnx_unsigned_int\fP family)"
.br
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_network_hostname_to_ip\fP (unsigned hint_family, \fBjnx_char\fP *host, \fBjnx_char\fP **out_ip, \fBjnx_unsigned_int\fP *out_addrfamily)"
.br
.ti -1c
.RI "size_t \fBjnx_http_request\fP (\fBJNX_HTTP_TYPE\fP type, const \fBjnx_char\fP *hostname, const \fBjnx_char\fP *page, \fBjnx_char\fP *args, \fBjnx_uint8\fP **out_reply, \fBjnx_size\fP *out_len)"
.br
.ti -1c
.RI "\fBJNX_HTTP_TYPE\fP \fBjnx_http_request_post\fP (const \fBjnx_char\fP *hostname, const \fBjnx_char\fP *page, \fBjnx_char\fP *args, \fBjnx_uint8\fP **out_reply, \fBjnx_size\fP *out_len)"
.br
.ti -1c
.RI "\fBJNX_HTTP_TYPE\fP \fBjnx_http_request_get\fP (const \fBjnx_char\fP *hostname, const \fBjnx_char\fP *page, \fBjnx_char\fP *args, \fBjnx_uint8\fP **out_reply, \fBjnx_size\fP *out_len)"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBJNX_HTTP_STATE\fP  \fBJNX_HTTP_STATE\fP"

.SS "typedef enum \fBJNX_HTTP_TYPE\fP  \fBJNX_HTTP_TYPE\fP"

.PP
Basic HTTP Protocols\&. 
.SS "typedef enum \fBJNX_NETWORK_ENDIAN\fP \fBJNX_NETWORK_ENDIAN\fP"

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBJNX_HTTP_STATE\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIJNX_HTTP_STATE_OKAY \fP\fP
.TP
\fB\fIJNX_HTTP_STATE_FAIL \fP\fP
.TP
\fB\fIJNX_HTTP_STATE_UNKNOWN \fP\fP
.SS "enum \fBJNX_HTTP_TYPE\fP"

.PP
Basic HTTP Protocols\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIJNX_HTTP_POST \fP\fP
.TP
\fB\fIJNX_HTTP_GET \fP\fP
.SS "enum \fBJNX_NETWORK_ENDIAN\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIJNX_LITTLE_ENDIAN \fP\fP
.TP
\fB\fIJNX_BIG_ENDIAN \fP\fP
.TP
\fB\fIJNX_UNKNOWN_ENDIAN \fP\fP
.SH "Function Documentation"
.PP 
.SS "size_t jnx_http_request (\fBJNX_HTTP_TYPE\fP type, const \fBjnx_char\fP * hostname, const \fBjnx_char\fP * page, \fBjnx_char\fP * args, \fBjnx_uint8\fP ** out_reply, \fBjnx_size\fP * out_len)"

.SS "\fBJNX_HTTP_TYPE\fP jnx_http_request_get (const \fBjnx_char\fP * hostname, const \fBjnx_char\fP * page, \fBjnx_char\fP * args, \fBjnx_uint8\fP ** out_reply, \fBjnx_size\fP * out_len)"

.SS "\fBJNX_HTTP_TYPE\fP jnx_http_request_post (const \fBjnx_char\fP * hostname, const \fBjnx_char\fP * page, \fBjnx_char\fP * args, \fBjnx_uint8\fP ** out_reply, \fBjnx_size\fP * out_len)"

.SS "\fBJNX_NETWORK_ENDIAN\fP jnx_network_get_endianness ()"

.SS "\fBjnx_int32\fP jnx_network_hostname_to_ip (unsigned hint_family, \fBjnx_char\fP * host, \fBjnx_char\fP ** out_ip, \fBjnx_unsigned_int\fP * out_addrfamily)"

.SS "\fBjnx_int32\fP jnx_network_interface_to_string (\fBjnx_char\fP ** obuffer, \fBjnx_char\fP * interface, \fBjnx_unsigned_int\fP family)"

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
