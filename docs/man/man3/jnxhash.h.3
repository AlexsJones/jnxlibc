.TH "jnxhash.h" 3 "Sun Feb 1 2015" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxhash.h \- API for jnxlibc's implementation of hashmap\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include 'jnxcheck\&.h'\fP
.br
\fC#include 'jnxtypes\&.h'\fP
.br
\fC#include 'jnxlist\&.h'\fP
.br
\fC#include 'jnxthread\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBbucketel\fP"
.br
.RI "\fIInternal container for a key value pair\&. \fP"
.ti -1c
.RI "struct \fBhashel\fP"
.br
.RI "\fIInternal container for key value pair lists\&. \fP"
.ti -1c
.RI "struct \fBhashmap\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBbucketel\fP \fBjnx_hash_bucket_el\fP"
.br
.RI "\fIInternal container for a key value pair\&. \fP"
.ti -1c
.RI "typedef struct \fBhashel\fP \fBjnx_hash_element\fP"
.br
.RI "\fIInternal container for key value pair lists\&. \fP"
.ti -1c
.RI "typedef struct \fBhashmap\fP \fBjnx_hashmap\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBjnx_hash_destroy\fP (\fBjnx_hashmap\fP **\fBhashmap\fP)"
.br
.ti -1c
.RI "void \fBjnx_hash_destroy_ts\fP (\fBjnx_hashmap\fP *\fBhashmap\fP)"
.br
.ti -1c
.RI "void * \fBjnx_hash_delete_value\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, \fBjnx_char\fP *key)"
.br
.RI "\fIremoves the key and returns the value for an entry \fP"
.ti -1c
.RI "void * \fBjnx_hash_delete_value_ts\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, \fBjnx_char\fP *key)"
.br
.ti -1c
.RI "\fBjnx_hashmap\fP * \fBjnx_hash_create\fP (\fBjnx_unsigned_int\fP size)"
.br
.RI "\fIReturns a newly created hashmap\&. \fP"
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_hash_put\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP *key, void *value)"
.br
.RI "\fIGiven a key and value this hashs and stores\&. \fP"
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_hash_put_ts\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP *key, void *value)"
.br
.ti -1c
.RI "void * \fBjnx_hash_get\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP *key)"
.br
.RI "\fIReturns the value for a given key\&. \fP"
.ti -1c
.RI "void * \fBjnx_hash_get_ts\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP *key)"
.br
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_hash_get_keys\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP ***keys)"
.br
.RI "\fIReturns the number of keys found, and mallocs keys array and inserts keys\&. \fP"
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_hash_get_keys_ts\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const \fBjnx_char\fP ***keys)"
.br
.ti -1c
.RI "\fBjnx_int32\fP \fBjnx_hash_string\fP (const \fBjnx_char\fP *input, \fBjnx_int32\fP map_size)"
.br
.in -1c
.SH "Detailed Description"
.PP 
API for jnxlibc's implementation of hashmap\&. 

#include <jnxc_headers/jnxhash\&.h> 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBbucketel\fP  \fBjnx_hash_bucket_el\fP"

.PP
Internal container for a key value pair\&. 
.SS "typedef struct \fBhashel\fP  \fBjnx_hash_element\fP"

.PP
Internal container for key value pair lists\&. 
.SS "typedef struct \fBhashmap\fP  \fBjnx_hashmap\fP"

.SH "Function Documentation"
.PP 
.SS "jnx_hash_create (\fBjnx_unsigned_int\fP size)"

.PP
Returns a newly created hashmap\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP createial size for the hashmap, jnx_unsigned_int i\&.e 1024 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created hashmap with size 
.RE
.PP

.SS "jnx_hash_delete_value (\fBjnx_hashmap\fP * hashmap, \fBjnx_char\fP * key)"

.PP
removes the key and returns the value for an entry 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to the map 
.br
\fIkey\fP pointer to key for lookup and removal 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to value 
.RE
.PP

.SS "void* jnx_hash_delete_value_ts (\fBjnx_hashmap\fP * hashmap, \fBjnx_char\fP * key)"

.SS "void jnx_hash_destroy (\fBjnx_hashmap\fP ** hashmap)"

.SS "void jnx_hash_destroy_ts (\fBjnx_hashmap\fP * hashmap)"

.SS "jnx_hash_get (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP * key)"

.PP
Returns the value for a given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to hashmap for retrieval 
.br
\fIkey\fP for search and value retrieval 
.RE
.PP
\fBReturns:\fP
.RS 4
void pointer to the data from value 
.RE
.PP

.SS "jnx_hash_get_keys (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP *** keys)"

.PP
Returns the number of keys found, and mallocs keys array and inserts keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to hashmap for retrieval 
.br
\fIkeys\fP is a pointer to an array which is given for mallocing and insertion 
.RE
.PP
\fBReturns:\fP
.RS 4
number of keys found 
.RE
.PP

.SS "\fBjnx_int32\fP jnx_hash_get_keys_ts (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP *** keys)"

.SS "void* jnx_hash_get_ts (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP * key)"

.SS "jnx_hash_put (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP * key, void * value)"

.PP
Given a key and value this hashs and stores\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to the target hashmap 
.br
\fIkey\fP the key you want to associate with the value 
.br
\fIvalue\fP data 
.RE
.PP

.SS "\fBjnx_int32\fP jnx_hash_put_ts (\fBjnx_hashmap\fP * hashmap, const \fBjnx_char\fP * key, void * value)"

.SS "\fBjnx_int32\fP jnx_hash_string (const \fBjnx_char\fP * input, \fBjnx_int32\fP map_size)"

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
