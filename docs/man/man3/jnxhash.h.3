.TH "jnxhash.h" 3 "Sun Apr 27 2014" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxhash.h \- 
.PP
API for jnxlibc's implementation of hashmap\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <assert\&.h>\fP
.br
\fC#include 'jnxlist\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBbucketel\fP"
.br
.RI "\fIInternal container for a key value pair\&. \fP"
.ti -1c
.RI "struct \fBhashel\fP"
.br
.RI "\fIInternal container for key value pair lists\&. \fP"
.ti -1c
.RI "struct \fBhashmap\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBbucketel\fP \fBjnx_hash_bucket_el\fP"
.br
.RI "\fIInternal container for a key value pair\&. \fP"
.ti -1c
.RI "typedef struct \fBhashel\fP \fBjnx_hash_element\fP"
.br
.RI "\fIInternal container for key value pair lists\&. \fP"
.ti -1c
.RI "typedef struct \fBhashmap\fP \fBjnx_hashmap\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBjnx_hash_destroy\fP (\fBjnx_hashmap\fP *\fBhashmap\fP)"
.br
.RI "\fIDeletes the keys and the hashmap\&. \fP"
.ti -1c
.RI "void * \fBjnx_hash_delete_value\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, char *key)"
.br
.RI "\fIremoves the key and returns the value for an entry \fP"
.ti -1c
.RI "\fBjnx_hashmap\fP * \fBjnx_hash_create\fP (unsigned int size)"
.br
.RI "\fIReturns a newly created hashmap\&. \fP"
.ti -1c
.RI "int \fBjnx_hash_put\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const char *key, void *value)"
.br
.RI "\fIGiven a key and value this hashs and stores\&. \fP"
.ti -1c
.RI "void * \fBjnx_hash_get\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const char *key)"
.br
.RI "\fIReturns the value for a given key\&. \fP"
.ti -1c
.RI "int \fBjnx_hash_get_keys\fP (\fBjnx_hashmap\fP *\fBhashmap\fP, const char ***keys)"
.br
.RI "\fIReturns the number of keys found, and mallocs keys array and inserts keys\&. \fP"
.ti -1c
.RI "int \fBjnx_hash_string\fP (const char *input, int map_size)"
.br
.RI "\fIAllows access to the hash string function, returning and unsigned int\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
API for jnxlibc's implementation of hashmap\&. 

#include <jnxc_headers/jnxhash\&.h> 
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBbucketel\fP  \fBjnx_hash_bucket_el\fP"

.PP
Internal container for a key value pair\&. 
.SS "typedef struct \fBhashel\fP  \fBjnx_hash_element\fP"

.PP
Internal container for key value pair lists\&. 
.SS "typedef struct \fBhashmap\fP  \fBjnx_hashmap\fP"

.SH "Function Documentation"
.PP 
.SS "jnx_hash_create (unsigned intsize)"

.PP
Returns a newly created hashmap\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsize\fP createial size for the hashmap, unsigned int i\&.e 1024 
.RE
.PP
\fBReturns:\fP
.RS 4
newly created hashmap with size 
.RE
.PP

.SS "jnx_hash_delete_value (\fBjnx_hashmap\fP *hashmap, char *key)"

.PP
removes the key and returns the value for an entry 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to the map 
.br
\fIkey\fP pointer to key for lookup and removal 
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to value 
.RE
.PP

.SS "jnx_hash_destroy (\fBjnx_hashmap\fP *hashmap)"

.PP
Deletes the keys and the hashmap\&. 
.PP
\fBWarning:\fP
.RS 4
Does not remove values 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to the map to be deleted 
.RE
.PP

.SS "jnx_hash_get (\fBjnx_hashmap\fP *hashmap, const char *key)"

.PP
Returns the value for a given key\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to hashmap for retrieval 
.br
\fIkey\fP for search and value retrieval 
.RE
.PP
\fBReturns:\fP
.RS 4
void pointer to the data from value 
.RE
.PP

.SS "jnx_hash_get_keys (\fBjnx_hashmap\fP *hashmap, const char ***keys)"

.PP
Returns the number of keys found, and mallocs keys array and inserts keys\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to hashmap for retrieval 
.br
\fIkeys\fP is a pointer to an array which is given for mallocing and insertion 
.RE
.PP
\fBReturns:\fP
.RS 4
number of keys found 
.RE
.PP

.SS "jnx_hash_put (\fBjnx_hashmap\fP *hashmap, const char *key, void *value)"

.PP
Given a key and value this hashs and stores\&. 
.PP
\fBParameters:\fP
.RS 4
\fIhashmap\fP pointer to the target hashmap 
.br
\fIkey\fP the key you want to associate with the value 
.br
\fIvalue\fP data 
.RE
.PP

.SS "jnx_hash_string (const char *input, intmap_size)"

.PP
Allows access to the hash string function, returning and unsigned int\&. 
.PP
\fBParameters:\fP
.RS 4
\fIinput\fP is the string to be hashed 
.br
\fImap_size\fP is used to round the remainder of the string 
.RE
.PP
\fBReturns:\fP
.RS 4
hash value of the input string 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
