.TH "jnxvector.h" 3 "Tue Apr 8 2014" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxvector.h \- 
.PP
The API for jnxlibc's implementation of vector\&.  

.SH SYNOPSIS
.br
.PP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBjnx_vector_record\fP"
.br
.RI "\fIAn internal implementation of record data\&. \fP"
.ti -1c
.RI "struct \fBjnx_vector\fP"
.br
.RI "\fIThe external structure and interface for jnx vector\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBjnx_vector\fP * \fBjnx_vector_create\fP (void)"
.br
.RI "\fIFunction that createialises internal vector structures\&. Call this function before you call any other function from the API\&. \fP"
.ti -1c
.RI "void \fBjnx_vector_destroy\fP (\fBjnx_vector\fP *vector)"
.br
.RI "\fIDeletes the vector and its data structures\&. \fP"
.ti -1c
.RI "void \fBjnx_vector_insert\fP (\fBjnx_vector\fP *vector, void *value)"
.br
.RI "\fIinserts into the next position in the vector \fP"
.ti -1c
.RI "void \fBjnx_vector_insert_at\fP (\fBjnx_vector\fP *vector, int position, void *value)"
.br
.RI "\fIinserts into the vector at a particular position, if it doesn't exist it will be crearted \fP"
.ti -1c
.RI "void * \fBjnx_vector_last\fP (\fBjnx_vector\fP *vector)"
.br
.RI "\fIreturns the last data entry in the vector and shortens it by 1 \fP"
.ti -1c
.RI "void * \fBjnx_vector_remove_at\fP (\fBjnx_vector\fP *vector, int position)"
.br
.RI "\fIremoves an entry at position in the vector \fP"
.in -1c
.SH "Detailed Description"
.PP 
The API for jnxlibc's implementation of vector\&. 

#include <jnxc_headers/jnxvector\&.h> 
.SH "Function Documentation"
.PP 
.SS "jnx_vector_create (void)"

.PP
Function that createialises internal vector structures\&. Call this function before you call any other function from the API\&. 
.SS "jnx_vector_destroy (\fBjnx_vector\fP *vector)"

.PP
Deletes the vector and its data structures\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP points to the vector to destroy
.RE
.PP
\fBWarning:\fP
.RS 4
User assumes responsibility for deleting all data entries first 
.RE
.PP

.SS "jnx_vector_insert (\fBjnx_vector\fP *vector, void *value)"

.PP
inserts into the next position in the vector 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP points to the vector to insert into 
.br
\fIvalue\fP value for insertion cast into void* 
.RE
.PP

.SS "jnx_vector_insert_at (\fBjnx_vector\fP *vector, intposition, void *value)"

.PP
inserts into the vector at a particular position, if it doesn't exist it will be crearted 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP 
.br
\fIposition\fP 
.br
\fIvalue\fP 
.RE
.PP

.SS "jnx_vector_last (\fBjnx_vector\fP *vector)"

.PP
returns the last data entry in the vector and shortens it by 1 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP points to the vector to use
.RE
.PP
\fBReturns:\fP
.RS 4
returns void* data from the last vector entry 
.RE
.PP

.SS "jnx_vector_remove_at (\fBjnx_vector\fP *vector, intposition)"

.PP
removes an entry at position in the vector 
.PP
\fBParameters:\fP
.RS 4
\fIvector\fP points to the target vector 
.br
\fIposition\fP target position 
.RE
.PP
\fBReturns:\fP
.RS 4
returns the value, returns NULL on error 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
