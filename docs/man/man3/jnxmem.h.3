.TH "jnxmem.h" 3 "Sun Mar 2 2014" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxmem.h \- 
.PP
The API for jnxlibc's implementation of simple memory management for DEBUG mode\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'jnxfile\&.h'\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBJNX_MEM_MALLOC\fP(X)   malloc(X)"
.br
.ti -1c
.RI "#define \fBJNX_MEM_CALLOC\fP(X, Y)   calloc(X,Y)"
.br
.ti -1c
.RI "#define \fBJNX_MEM_REALLOC\fP(X, Y)   realloc(X,Y)"
.br
.ti -1c
.RI "#define \fBJNX_MEM_FREE\fP(X)   free(X)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBjnx_mem_print\fP ()"
.br
.RI "\fIprints memory tree to file \fP"
.ti -1c
.RI "void \fBjnx_mem_print_to_file\fP (char *path)"
.br
.RI "\fIprints current memory tree to file \fP"
.ti -1c
.RI "size_t \fBjnx_mem_clear\fP ()"
.br
.RI "\fIclears all program memory registered through JNX_MEM \fP"
.ti -1c
.RI "size_t \fBjnx_mem_get_current_size_allocations\fP ()"
.br
.ti -1c
.RI "size_t \fBjnx_mem_get_current_number_allocations\fP ()"
.br
.RI "\fIgives the current size of allocated memory in your program using jnx_mem \fP"
.ti -1c
.RI "size_t \fBjnx_mem_get_total_size_allocations\fP ()"
.br
.ti -1c
.RI "size_t \fBjnx_mem_get_total_number_allocations\fP ()"
.br
.RI "\fIgives the total size of allocated memory in your program using jnx_mem \fP"
.ti -1c
.RI "void * \fBjnx_mem_malloc\fP (size_t size, char *file, const char *function, int line)"
.br
.ti -1c
.RI "void * \fBjnx_mem_realloc\fP (void *ptr, size_t size, char *file, const char *function, int line)"
.br
.ti -1c
.RI "void * \fBjnx_mem_calloc\fP (size_t num, size_t size, char *file, const char *function, int line)"
.br
.ti -1c
.RI "void \fBjnx_mem_free\fP (void *ptr)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The API for jnxlibc's implementation of simple memory management for DEBUG mode\&. 

#include <jnxc_headers/jnxmem\&.h> 
.SH "Macro Definition Documentation"
.PP 
.SS "#define JNX_MEM_CALLOC(X, Y)   calloc(X,Y)"

.SS "#define JNX_MEM_FREE(X)   free(X)"

.SS "#define JNX_MEM_MALLOC(X)   malloc(X)"

.SS "#define JNX_MEM_REALLOC(X, Y)   realloc(X,Y)"

.SH "Function Documentation"
.PP 
.SS "void* jnx_mem_calloc (size_tnum, size_tsize, char *file, const char *function, intline)"

.SS "jnx_mem_clear ()"

.PP
clears all program memory registered through JNX_MEM 
.PP
\fBWarning:\fP
.RS 4
use with caution will free memory 
.RE
.PP
\fBReturns:\fP
.RS 4
size_t of memory cleared 
.RE
.PP

.SS "void jnx_mem_free (void *ptr)"

.SS "size_t jnx_mem_get_current_number_allocations ()"

.PP
gives the current size of allocated memory in your program using jnx_mem gives the current number of allocated memory in your program using jnx_mem
.PP
\fBReturns:\fP
.RS 4
size_t of memory allocated currently
.PP
size_t number of memory allocated currently 
.RE
.PP

.SS "size_t jnx_mem_get_current_size_allocations ()"

.SS "jnx_mem_get_total_number_allocations ()"

.PP
gives the total size of allocated memory in your program using jnx_mem 
.PP
\fBReturns:\fP
.RS 4
size_t of memory allocated
.PP
size_t of number of allocations in program 
.RE
.PP

.SS "size_t jnx_mem_get_total_size_allocations ()"

.SS "void* jnx_mem_malloc (size_tsize, char *file, const char *function, intline)"

.SS "void jnx_mem_print ()"

.PP
prints memory tree to file 
.SS "void jnx_mem_print_to_file (char *path)"

.PP
prints current memory tree to file 
.SS "void* jnx_mem_realloc (void *ptr, size_tsize, char *file, const char *function, intline)"

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
