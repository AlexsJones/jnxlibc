<<<<<<< HEAD
.\" File automatically generated by doxy2man0.1
.\" Generation date: Wed Apr 16 2014
.TH jnxbtree.h 3 2014-04-16 "XXXpkg" "The XXX Manual"
.SH "NAME"
jnxbtree.h \- The API for jnxlibc's implementation of B-trees.
=======
.TH "jnxbtree.h" 3 "Sun Apr 27 2014" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxbtree.h \- 
.PP
The API for jnxlibc's implementation of B-trees\&.  

>>>>>>> alex/master
.SH SYNOPSIS
.br
.PP
\fC#include 'jnxlist\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBB_tree_record\fP"
.br
.RI "\fIInternal representation of a (key, value) pair\&. \fP"
.ti -1c
.RI "struct \fBB_tree_node\fP"
.br
.RI "\fIInternal representation of a node in a B-tree\&. \fP"
.ti -1c
.RI "struct \fBB_tree\fP"
.br
.RI "\fIInternal representation of the whole B-tree\&. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBB_tree_record\fP \fBrecord\fP"
.br
.RI "\fIInternal representation of a (key, value) pair\&. \fP"
.ti -1c
.RI "typedef int(* \fBcompare_keys\fP )(void *, void *)"
.br
.RI "\fIType for the callback function to determine the order of two keys\&. \fP"
.ti -1c
.RI "typedef struct \fBB_tree_node\fP \fBjnx_btree_node\fP"
.br
.RI "\fIInternal representation of a node in a B-tree\&. \fP"
.ti -1c
.RI "typedef struct \fBB_tree\fP \fBjnx_btree\fP"
.br
.RI "\fIInternal representation of the whole B-tree\&. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBjnx_btree\fP * \fBjnx_btree_create\fP (int order, \fBcompare_keys\fP callback)"
.br
.ti -1c
.RI "void \fBjnx_btree_add\fP (\fBjnx_btree\fP *tree, void *key, void *value)"
.br
.RI "\fIAdd a record (key, value) to the B-tree\&. \fP"
.ti -1c
.RI "void * \fBjnx_btree_lookup\fP (\fBjnx_btree\fP *tree, void *key)"
.br
.RI "\fIRetreive the value for key from the B-tree\&. \fP"
.ti -1c
.RI "void \fBjnx_btree_remove\fP (\fBjnx_btree\fP *tree, void *key_in, void **key_out, void **val_out)"
.br
.RI "\fIRemove from the B-tree the record which matches the passed in key\&. \fP"
.ti -1c
.RI "void \fBjnx_btree_destroy\fP (\fBjnx_btree\fP *tree)"
.br
.ti -1c
.RI "void \fBjnx_btree_keys\fP (\fBjnx_btree\fP *tree, \fBjnx_list\fP *keys)"
.br
.RI "\fIPut all the keys currently in the tree into the keys list\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The API for jnxlibc's implementation of B-trees\&. 

#include <jnxc_headers/jnxbtree\&.h> 
.SH "Typedef Documentation"
.PP 
.SS "typedef int(* compare_keys)(void *, void *)"

.PP
Type for the callback function to determine the order of two keys\&. Callback function that the user needs to supply and which compares two keys, and effectivelly two records as keys and values live together in a node record\&.
.PP
The B-tree keys are required to follow some order, so with respect to that order the function should return:
.IP "\(bu" 2
an integer < 0 if first parameter comes before second parameter
.IP "\(bu" 2
a 0 if first and second parameters are equal
.IP "\(bu" 2
an integer > 0 if the first parameter comes after the second parameter
.PP
.PP
Typically, these values can be -1, 0, and 1 respectivelly\&. 
.SS "typedef struct \fBB_tree\fP  \fBjnx_btree\fP"

.PP
Internal representation of the whole B-tree\&. 
.SS "typedef struct \fBB_tree_node\fP  \fBjnx_btree_node\fP"

.PP
Internal representation of a node in a B-tree\&. 
.SS "typedef struct \fBB_tree_record\fP  \fBrecord\fP"

.PP
Internal representation of a (key, value) pair\&. 
.SH "Function Documentation"
.PP 
.SS "void jnx_btree_add (\fBjnx_btree\fP *tree, void *key, void *value)"

.PP
Add a record (key, value) to the B-tree\&. This function takes a key and a value for the record, creates the appropriate record and inserts it into the tree\&. If a record with the same key already exists in the tree the function will just replace the value for that record\&.
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The B-tree to which new record is added 
.br
\fIkey\fP The key for the record 
.br
\fIvalue\fP The value for the record
.RE
.PP
\fBWarning:\fP
.RS 4
The key and value are not copied they are just used as pointer assignments, so it's important to think about the lifecycle of keys and values you pass to the function\&. 
.RE
.PP

.SS "\fBjnx_btree\fP* jnx_btree_create (intorder, \fBcompare_keys\fPcallback)"

.SS "void jnx_btree_destroy (\fBjnx_btree\fP *tree)"

.SS "void jnx_btree_keys (\fBjnx_btree\fP *tree, \fBjnx_list\fP *keys)"

.PP
Put all the keys currently in the tree into the keys list\&. void \fBjnx_btree_keys(jnx_btree *tree, jnx_list *keys)\fP The function traverses the tree and puts all of the keys into the supplied jnx_list \fIkeys\fP\&. The \fIkeys\fP list is ordered in the ascending order\&. The \fIkeys\fP list must not be NULL, otherwise the function won't traverse the tree\&.
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The B-tree to traverse\&. 
.br
\fIkeys\fP The jnx_list into which to put all of the \fItree\fP keys\&.
.RE
.PP
\fBWarning:\fP
.RS 4
Do not free key pointers from \fIkeys\fP list, otherwise you'll corrupt the B-tree\&. If you want the key removed use \fIjnx_btree_remove\fP function\&. 
.RE
.PP

.SS "void jnx_btree_lookup (\fBjnx_btree\fP *tree, void *key)"

.PP
Retreive the value for key from the B-tree\&. The function returns the pointer to the value, or NULL if the key is not in the B-tree\&.
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The B-tree in which to look up the value for key\&. 
.br
\fIkey\fP The key for lookup\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the value, or NULL if key is not in the tree\&.
.RE
.PP
\fBWarning:\fP
.RS 4
The value is just a pointer to, not a copy of the actual value so it is very important to think carefully before you free its memory as it'll be freed from the B-tree record also\&. 
.RE
.PP

.SS "void * jnx_btree_remove (\fBjnx_btree\fP *tree, void *key_in, void **key_out, void **val_out)"

.PP
Remove from the B-tree the record which matches the passed in key\&. If the record with \fIkey\fP is in the \fItree\fP, the record is removed and the tree is rebalanced if necessary\&. If the record with \fIkey\fP is not in the tree, the \fItree\fP is unchanged\&.
.PP
\fBParameters:\fP
.RS 4
\fItree\fP The B-tree from which to remove the record\&. 
.br
\fIkey_in\fP The key for which to remove the record\&. 
.br
\fIkey_out\fP The reference by which the pointer to the memory for key from the tree record is returned\&. Set this to NULL if your keys are not malloced\&. 
.br
\fIval_out\fP The reference by which the pointer to the memory for value from the tree record is returned\&. Set this to NULL if your values are not malloced\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pointer to the value from the tree so that users can free potentially malloc'd values\&.
.RE
.PP
\fBWarning:\fP
.RS 4
This operation will clean up the internal structures but will not attempt to free the memory for the key and value of the deleted record\&. It's worth bearing this in mind to avoid memory leaks\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
