.TH "jnxsocket.h" 3 "Sun Feb 1 2015" "jnxlibc" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jnxsocket.h \- The API for jnxlibc networking (includes TCP, UDP )  

.SH SYNOPSIS
.br
.PP
\fC#include 'jnxtypes\&.h'\fP
.br
\fC#include <stddef\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <sys/un\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBjnx_socket\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBjnx_int32\fP(* \fBtcp_socket_listener_callback\fP) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s)"
.br
.ti -1c
.RI "typedef \fBjnx_int32\fP(* \fBtcp_socket_listener_callback_with_context\fP) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s, void *context)"
.br
.ti -1c
.RI "typedef \fBjnx_int32\fP(* \fBudp_socket_listener_callback\fP) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s)"
.br
.ti -1c
.RI "typedef \fBjnx_int32\fP(* \fBudp_socket_listener_callback_with_context\fP) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s, void *context)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBjnx_socket\fP * \fBjnx_socket_tcp_create\fP (\fBjnx_unsigned_int\fP addrfamily)"
.br
.RI "\fIcreates a jnx tcp socket \fP"
.ti -1c
.RI "\fBjnx_socket\fP * \fBjnx_socket_udp_create\fP (\fBjnx_unsigned_int\fP addrfamily)"
.br
.RI "\fIcreates a jnx udp socket \fP"
.ti -1c
.RI "void \fBjnx_socket_close\fP (\fBjnx_socket\fP *s)"
.br
.ti -1c
.RI "void \fBjnx_socket_destroy\fP (\fBjnx_socket\fP **s)"
.br
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_udp_enable_broadcast_send_or_listen\fP (\fBjnx_socket\fP *s)"
.br
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_udp_enable_multicast_send\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *interface, \fBjnx_int32\fP ignore_local)"
.br
.RI "\fIThis is function will enable the given socket to transmit multicast packets over domain\&. \fP"
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_udp_enable_multicast_listen\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *interface, \fBjnx_char\fP *group)"
.br
.RI "\fIThis function will enable the given socket to recieve multicast packets on the given interface for the subscribed group\&. \fP"
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_tcp_send\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *host, \fBjnx_char\fP *port, \fBjnx_uint8\fP *msg, \fBjnx_size\fP msg_len)"
.br
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_tcp_send_with_receipt\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *host, \fBjnx_char\fP *port, \fBjnx_uint8\fP *msg, \fBjnx_size\fP msg_len, \fBjnx_uint8\fP **out_receipt)"
.br
.ti -1c
.RI "\fBjnx_size\fP \fBjnx_socket_udp_send\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *host, \fBjnx_char\fP *port, \fBjnx_uint8\fP *msg, \fBjnx_size\fP msg_len)"
.br
.ti -1c
.RI "int \fBjnx_socket_tcp_listen\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *port, \fBjnx_size\fP max_connections, \fBtcp_socket_listener_callback\fP c)"
.br
.ti -1c
.RI "int \fBjnx_socket_udp_listen\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *port, \fBjnx_size\fP max_connections, \fBudp_socket_listener_callback\fP c)"
.br
.ti -1c
.RI "int \fBjnx_socket_tcp_listen_with_context\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *port, \fBjnx_size\fP max_connections, \fBtcp_socket_listener_callback_with_context\fP c, void *context)"
.br
.ti -1c
.RI "int \fBjnx_socket_udp_listen_with_context\fP (\fBjnx_socket\fP *s, \fBjnx_char\fP *port, \fBjnx_size\fP max_connections, \fBudp_socket_listener_callback_with_context\fP c, void *context)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The API for jnxlibc networking (includes TCP, UDP ) 

#include <jnxc_headers/jnxsocket\&.h> 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBjnx_int32\fP(* tcp_socket_listener_callback) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s)"

.SS "typedef \fBjnx_int32\fP(* tcp_socket_listener_callback_with_context) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s, void *context)"

.SS "typedef \fBjnx_int32\fP(* udp_socket_listener_callback) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s)"

.SS "typedef \fBjnx_int32\fP(* udp_socket_listener_callback_with_context) (\fBjnx_uint8\fP *payload, \fBjnx_size\fP bytesread, \fBjnx_socket\fP *s, void *context)"

.SH "Function Documentation"
.PP 
.SS "void jnx_socket_close (\fBjnx_socket\fP * s)"

.SS "void jnx_socket_destroy (\fBjnx_socket\fP ** s)"

.SS "\fBjnx_socket\fP * jnx_socket_tcp_create (\fBjnx_unsigned_int\fP addrfamily)"

.PP
creates a jnx tcp socket 
.PP
\fBParameters:\fP
.RS 4
\fIaddrfamily\fP this is the address family to use (e\&.g\&. AF_INET) 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBjnx_socket\fP 
.RE
.PP

.SS "int jnx_socket_tcp_listen (\fBjnx_socket\fP * s, \fBjnx_char\fP * port, \fBjnx_size\fP max_connections, \fBtcp_socket_listener_callback\fP c)"

.SS "int jnx_socket_tcp_listen_with_context (\fBjnx_socket\fP * s, \fBjnx_char\fP * port, \fBjnx_size\fP max_connections, \fBtcp_socket_listener_callback_with_context\fP c, void * context)"

.SS "\fBjnx_size\fP jnx_socket_tcp_send (\fBjnx_socket\fP * s, \fBjnx_char\fP * host, \fBjnx_char\fP * port, \fBjnx_uint8\fP * msg, \fBjnx_size\fP msg_len)"

.SS "jnx_socket_tcp_send_with_receipt (\fBjnx_socket\fP * s, \fBjnx_char\fP * host, \fBjnx_char\fP * port, \fBjnx_uint8\fP * msg, \fBjnx_size\fP msg_len, \fBjnx_uint8\fP ** out_receipt)"

.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the socket to use to send 
.br
\fIhost\fP is the target destination 
.br
\fIport\fP is the target port 
.br
\fImsg\fP is the payload to send 
.br
\fImsg_len\fP is the size of payload 
.br
\fIout_receipt\fP returned from the target host 
.RE
.PP
\fBReturns:\fP
.RS 4
jnx_size of bytes sent 
.RE
.PP

.SS "\fBjnx_socket\fP * jnx_socket_udp_create (\fBjnx_unsigned_int\fP addrfamily)"

.PP
creates a jnx udp socket 
.PP
\fBParameters:\fP
.RS 4
\fIaddrfamily\fP this is the address family to use (e\&.g\&. AF_INET) 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBjnx_socket\fP 
.RE
.PP

.SS "\fBjnx_size\fP jnx_socket_udp_enable_broadcast_send_or_listen (\fBjnx_socket\fP * s)"

.SS "\fBjnx_size\fP jnx_socket_udp_enable_multicast_listen (\fBjnx_socket\fP * s, \fBjnx_char\fP * interface, \fBjnx_char\fP * group)"

.PP
This function will enable the given socket to recieve multicast packets on the given interface for the subscribed group\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the socket to enable multicast listening on 
.br
\fIinterface\fP is the IP address of the interface to use on the local machine 
.br
\fIgroup\fP is the multicast group to subscribe too 
.RE
.PP
\fBReturns:\fP
.RS 4
returns 0 on success 
.RE
.PP

.SS "\fBjnx_size\fP jnx_socket_udp_enable_multicast_send (\fBjnx_socket\fP * s, \fBjnx_char\fP * interface, \fBjnx_int32\fP ignore_local)"

.PP
This is function will enable the given socket to transmit multicast packets over domain\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the socket to enable multicast sending on 
.br
\fIinterface\fP is the IP address of the interface to use on the local machine 
.br
\fIignore_local\fP is a flag to either disable local multicast loopback 
.br
\fIreturns\fP 0 on success 
.RE
.PP

.SS "int jnx_socket_udp_listen (\fBjnx_socket\fP * s, \fBjnx_char\fP * port, \fBjnx_size\fP max_connections, \fBudp_socket_listener_callback\fP c)"

.SS "int jnx_socket_udp_listen_with_context (\fBjnx_socket\fP * s, \fBjnx_char\fP * port, \fBjnx_size\fP max_connections, \fBudp_socket_listener_callback_with_context\fP c, void * context)"

.SS "jnx_socket_udp_send (\fBjnx_socket\fP * s, \fBjnx_char\fP * host, \fBjnx_char\fP * port, \fBjnx_uint8\fP * msg, \fBjnx_size\fP msg_len)"

.PP
\fBParameters:\fP
.RS 4
\fIs\fP is the socket to use to send 
.br
\fIhost\fP is the target destination 
.br
\fIport\fP is the target port 
.br
\fImsg\fP is the payload to send 
.br
\fImsg_len\fP is the size of payload 
.RE
.PP
\fBWarning:\fP
.RS 4
UDP header is 16bit which means 65k is the max file transmission size 
.RE
.PP
\fBReturns:\fP
.RS 4
jnx_size of bytes sent 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for jnxlibc from the source code\&.
