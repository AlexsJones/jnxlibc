cmake_minimum_required(VERSION 2.8)
set(INSTALL_PREFIX /usr)
project(jnxlibc)

set(SOURCE "")
set(HEADERS "")

add_subdirectory(src/alg)
add_subdirectory(src/bug)
add_subdirectory(src/dat)
add_subdirectory(src/io)
add_subdirectory(src/ipc)
add_subdirectory(src/net)
add_subdirectory(src/sig)
add_subdirectory(src/sys)
add_subdirectory(src/thr)

include_directories(src/alg)
include_directories(src/bug)
include_directories(src/dat)
include_directories(src/io)
include_directories(src/ipc)
include_directories(src/net)
include_directories(src/sig)
include_directories(src/sys)
include_directories(src/thr)

file(MAKE_DIRECTORY jnxc_headers)
file(COPY ${HEADERS} DESTINATION jnxc_headers)

option(OPT_DIR "Compile in optional module" OFF)
if(OPT_DIR)
  message("Compiling optional module ${OPT_DIR}")
  add_subdirectory(src/${OPT_DIR})
  include_directories(src/${OPT_DIR})
endif()

option(RELEASE "Run in release mode" OFF)
if(RELEASE)
  message("RELEASE")
  ADD_DEFINITIONS(-DRELEASE)
else()
  message("DEBUG")
  ADD_DEFINITIONS(-DDEBUG)
endif()

option(RUN_TESTS "Run jnxlibc tests" OFF)
if(RUN_TESTS)
  execute_process(COMMAND cmake . WORKING_DIRECTORY test/unit)
  execute_process(COMMAND make WORKING_DIRECTORY test/unit)
  execute_process(COMMAND ./test_run WORKING_DIRECTORY test/unit RESULT_VARIABLE test_res)
  message("RET CODE IS => " ${test_res})
  if(${test_res} EQUAL 0)
    message("TESTS PASSED!")
  else()
    message(FATAL_ERROR "TESTS FAILED!")
  endif()
endif()
set(CMAKE_C_FLAGS "-Wall")
set(CMAKE_C_FLAGS_DEBUG "-g -rdynamic")
set(CMAKE_C_FLAGS_RELEASE "-O2")

IF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64") 
  ADD_DEFINITIONS(-fPIC) 
ENDIF(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")

add_library(jnxcs STATIC ${SOURCE}) 
add_library(jnxc SHARED ${SOURCE})

target_link_libraries(jnxc ${LINKER_LIBRARIES})
target_link_libraries(jnxcs ${LINKER_LIBRARIES})
install(TARGETS jnxcs DESTINATION ${INSTALL_PREFIX}/lib)
install(TARGETS jnxc DESTINATION ${INSTALL_PREFIX}/lib)
install(DIRECTORY jnxc_headers DESTINATION ${INSTALL_PREFIX}/include)
