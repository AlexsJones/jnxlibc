{"name":"Jnxlibc","tagline":"Powerful, light, feature-rich C library","body":"![jnx Icon](http://i.imgur.com/w6M1lJP.png) \r\n jnxlibc\r\n=======\r\n[![Build Status](https://travis-ci.org/AlexsJones/jnxlibc.png)](https://travis-ci.org/AlexsJones/jnxlibc)\r\n\r\nTest driven C library for reliable networking, data structures and utility functionality.\r\nConstantly in development and refinement to make it as memory/thread safe as possible whilst maintaining\r\nno dependencies and low foot print.\r\n\r\n####For a solid snapshot of the library check out the releases\r\nhttps://github.com/AlexsJones/jnxlibc/releases\r\n\r\n\r\n#Key features\r\n- Lightweight data structures (hash, list, vector, btree, stack, queue)\r\n- Network socket implmentation supporting multiple transport and IPV4/IPV6\r\n- Threading & threadsafe data structure API\r\n- Signals & Slots\r\n- Interprocess communication\r\n- Verbose terminal logging\r\n- Easy to use file read/write functions\r\n- Fast and easy base64 encoding/decoding\r\n- Auto generated documentation and logical API\r\n\r\n#Documentation & Examples\r\n\r\n- MAN  docs/man\r\n- HTML docs/html ([Here](http://htmlpreview.github.io/?https://raw.github.com/AlexsJones/jnxlibc/master/docs/html/files.html))\r\n- Examples of functionality in test suite.\r\n- Code reviewing\r\n\r\n#Installation\r\n\r\nCurrently supported platforms:\r\nLinux distributions/OS X\r\n\r\nArch linux users\r\n````\r\nyaourt jnxlibc \r\n````\r\n\r\nGrab this repo.\r\n````\r\n./setup/build_and_install\r\n\r\nUse -ljnxc when building your project\r\n\r\n````\r\n####Flags\r\n\r\n-DRELEASE (Sets library for release mode optimisations) \r\n\r\n##Examples\r\n\r\nSending message over network\r\n```C\r\njnx_socket *udp_sock = jnx_socket_udp_create(AF_INET);\r\njnx_socket_udp_send(udp_sock,\"host\",\"port\",\"message\",strlen(\"message\"));\r\njnx_socket_close(tcp_sock);\r\n\r\n```\r\nUsing a binary tree\r\n```C\r\njnx_btree *tree = jnx_btree_create(sizeof(int),callback_func);\r\n//insertion\r\nint i;\r\nfor(i=0;i<10;++i) {\r\n  void *next = (void*)(guids[i]);\r\n  jnx_btree_add(tree,next,next);\r\n}\r\n//get keys\r\njnx_list *keys = jnx_list_create();\r\njnx_btree_keys(tree,keys);\r\n\r\nwhile(keys->head) {\r\n  char *a_key = keys->head->data;\r\n  void *val = jnx_btree_lookup(tree,(void*)a_key);\r\n  jnx_btree_remove(tree,a_key,NULL,NULL);\r\n  keys->head = keys->head->next_node;\r\n}\r\njnx_list_destroy(&keys);\r\njnx_btree_destroy(&tree);\r\n```\r\nManipulating data from a hashmap with thread safety\r\n```C\r\nvoid *value = jnx_hash_get_ts(hashmap,\"Key\");\r\njnx_hash_put_ts(hashmap,\"Key\",update_value);\r\n```\r\n\r\nUsing signals and slots\r\n```C\r\n\r\ntypedef void local_slot(jnx_signal *s);\r\n\r\njnx_signal *s = jnx_signal_create();\r\njnx_signal_connect(s,local_slot);\r\njnx_signal_call(s,NULL);\r\njnx_signal_destroy(&s);\r\n\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}