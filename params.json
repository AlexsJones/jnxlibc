{"name":"Jnxlibc","tagline":"Powerful, light, feature-rich C library","body":"\r\njnxlibc\r\n=======\r\n[![Build Status](https://travis-ci.org/AlexsJones/jnxlibc.svg?branch=master)](https://travis-ci.org/AlexsJones/jnxlibc.svg?branch=master)\r\n[![License](http://img.shields.io/badge/license-GPLv3-green.svg)](http://img.shields.io/badge/license-GPLv3-green.svg)\r\n[![Dev](http://img.shields.io/badge/development-active-green.svg)](http://img.shields.io/badge/development-active-green.svg)\r\n\r\n\r\n>A modern C library that provides a useful self contained API that has built in testing and just works.\r\n>Covering a range of boilerplate code areas and low level networking; jnxlibc provides both a reliable systems library and tool for learning.\r\n\r\n[Latest release](https://github.com/AlexsJones/jnxlibc/releases)\r\n\r\n\r\n#Key features\r\n- Lightweight data structures with thread-safe API (hash, list, vector, btree, stack, queue) \r\n- Socket implmentation supporting multiple transport and IPV4/IPV6 (Multicasting,Broadcast,Unicast) TCP/IP & UDP\r\n- Network utilities (get IP from hostname, resolve hostname from IP, interface to IP)\r\n- Threading interface above POSIX (Ambition to extend x-platform)\r\n- Signals & Slots\r\n- Interprocess communication\r\n- Verbose terminal logging\r\n- Easy to use file read/write functions\r\n- Fast and easy base64 encoding/decoding\r\n- Auto generated documentation and logical API\r\n- Almost total test coverage (Unit tests/ Performance tests)\r\n- Armv7 framework version available [Here](https://github.com/AlexsJones/jnxlibc_ios)\r\n\r\n#Documentation & Examples\r\n\r\n- First port of call: [Wiki](https://github.com/AlexsJones/jnxlibc/wiki/A-library-tour)\r\n- MAN  docs/man\r\n- HTML docs/html ([Here](http://htmlpreview.github.io/?https://raw.github.com/AlexsJones/jnxlibc/master/docs/html/files.html))\r\n- [Loads of lovely tests in C!](setup/test)\r\n- Code reviewing\r\n\r\n#Installation\r\n\r\n###Dependencies\r\n```\r\nGCC\r\nCMake\r\n```\r\nCurrently supported platforms:\r\nLinux distributions/OS X\r\n\r\n\r\nDefault install location\r\n```\r\ngit clone git@github.com:AlexsJones/jnxlibc jnxlibc && cd jnxlibc\r\ncmake .\r\nmake\r\nsudo make install\r\n```\r\nCustom install location\r\n```\r\ngit clone git@github.com:AlexsJones/jnxlibc jnxlibc && cd jnxlibc\r\ncmake . -DCMAKE_INSTALL_PREFIX=/Users/alexjo/Projects/jnxlibc/build/ \r\nmake\r\nsudo make install\r\n```\r\n\r\nUse `-ljnxc` when building your project for shared library\r\nUse `-ljnxcs` for static library\r\n\r\n####Flags\r\n\r\n-DRELEASE (Sets library for release mode optimisations) \r\n\r\n##Examples\r\n\r\nSending message over network\r\n```C\r\njnx_socket *udp_sock = jnx_socket_udp_create(AF_INET);\r\njnx_socket_udp_send(udp_sock,\"host\",\"port\",\"message\",strlen(\"message\"));\r\njnx_socket_close(udp_sock);\r\n\r\n```\r\nUsing a binary tree\r\n```C\r\njnx_btree *tree = jnx_btree_create(sizeof(int),callback_func);\r\n//insertion\r\nint i;\r\nfor(i=0;i<10;++i) {\r\n  void *next = (void*)(guids[i]);\r\n  jnx_btree_add(tree,next,next);\r\n}\r\n//get keys\r\njnx_list *keys = jnx_list_create();\r\njnx_btree_keys(tree,keys);\r\n\r\nwhile(keys->head) {\r\n  char *a_key = keys->head->data;\r\n  void *val = jnx_btree_lookup(tree,(void*)a_key);\r\n  jnx_btree_remove(tree,a_key,NULL,NULL);\r\n  keys->head = keys->head->next_node;\r\n}\r\njnx_list_destroy(&keys);\r\njnx_btree_destroy(&tree);\r\n```\r\nManipulating data from a hashmap with thread safety\r\n```C\r\nvoid *value = jnx_hash_get_ts(hashmap,\"Key\");\r\njnx_hash_put_ts(hashmap,\"Key\",update_value);\r\n```\r\n\r\nUsing signals and slots\r\n```C\r\n\r\ntypedef void local_slot(jnx_signal *s);\r\n\r\njnx_signal *s = jnx_signal_create();\r\njnx_signal_connect(s,local_slot);\r\njnx_signal_call(s,NULL);\r\njnx_signal_destroy(&s);\r\n\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}